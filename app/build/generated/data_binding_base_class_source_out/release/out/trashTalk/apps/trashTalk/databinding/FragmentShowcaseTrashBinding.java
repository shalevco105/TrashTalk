// Generated by view binder compiler. Do not edit!
package trashTalk.apps.trashTalk.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.ImageView;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.constraintlayout.widget.ConstraintLayout;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;
import trashTalk.apps.trashTalk.R;

public final class FragmentShowcaseTrashBinding implements ViewBinding {
  @NonNull
  private final ConstraintLayout rootView;

  @NonNull
  public final TextView authorNickName;

  @NonNull
  public final TextView showcaseRecipeName;

  @NonNull
  public final ImageView showcaseTrashImage;

  @NonNull
  public final TextView showcaseTrashRecipe;

  private FragmentShowcaseTrashBinding(@NonNull ConstraintLayout rootView,
      @NonNull TextView authorNickName, @NonNull TextView showcaseRecipeName,
      @NonNull ImageView showcaseTrashImage, @NonNull TextView showcaseTrashRecipe) {
    this.rootView = rootView;
    this.authorNickName = authorNickName;
    this.showcaseRecipeName = showcaseRecipeName;
    this.showcaseTrashImage = showcaseTrashImage;
    this.showcaseTrashRecipe = showcaseTrashRecipe;
  }

  @Override
  @NonNull
  public ConstraintLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static FragmentShowcaseTrashBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static FragmentShowcaseTrashBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.fragment_showcase_trash, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static FragmentShowcaseTrashBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.authorNickName;
      TextView authorNickName = ViewBindings.findChildViewById(rootView, id);
      if (authorNickName == null) {
        break missingId;
      }

      id = R.id.showcaseRecipeName;
      TextView showcaseRecipeName = ViewBindings.findChildViewById(rootView, id);
      if (showcaseRecipeName == null) {
        break missingId;
      }

      id = R.id.showcaseTrashImage;
      ImageView showcaseTrashImage = ViewBindings.findChildViewById(rootView, id);
      if (showcaseTrashImage == null) {
        break missingId;
      }

      id = R.id.showcaseTrashRecipe;
      TextView showcaseTrashRecipe = ViewBindings.findChildViewById(rootView, id);
      if (showcaseTrashRecipe == null) {
        break missingId;
      }

      return new FragmentShowcaseTrashBinding((ConstraintLayout) rootView, authorNickName,
          showcaseRecipeName, showcaseTrashImage, showcaseTrashRecipe);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
